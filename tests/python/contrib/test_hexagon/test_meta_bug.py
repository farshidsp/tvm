"""
Run end to end model using meta schedual on fp16
"""
import tempfile

from re import T
import numpy as np
import onnx
import tvm
from tvm import relay
from tvm import meta_schedule as ms
from tvm.contrib.hexagon.meta_schedule import get_hexagon_local_builder, get_hexagon_rpc_runner
from tvm.relay.backend import Executor

from models import export_onnx
from models.run_model import get_onnx_input_shapes, tvm_convert_to_fp16, onnx_to_relay
from tvm.meta_schedule.cost_model.xgb_model import XGBModel

# from tvm.script import relax as R
from tvm.script import tir as T

TUNE = True
SAVE_TUNING_DATABSE = True
EXECUTOR = relay.backend.Executor("graph", {"link-params": True})

target_hexagon = tvm.target.hexagon("v69")
target_llvm = tvm.target.Target("llvm")

def convert_conv2d_layout(mod, desired_layouts):
    with tvm.transform.PassContext(opt_level=3):
        seq = tvm.transform.Sequential([relay.transform.ConvertLayout(desired_layouts)])
        return seq(mod)


def tune_ms(mod, params, hexagon_launcher, work_dir):
    # This line is necessary for link-params to take effect during
    # task extraction and relay.build(...).
    mod = mod.with_attr("executor", EXECUTOR)

    target = tvm.target.Target(target_hexagon, host=target_hexagon)

    if TUNE:
        if SAVE_TUNING_DATABSE:
            database = ms.tir_integration.tune_tir(
                mod=mod,
                target=target,
                # params=params,
                work_dir=work_dir,
                # for faster tuning
                max_trials_global=16,
                # max_trials_per_task=8,
                num_trials_per_iter=8,
                strategy="replay-trace",
                # max_trials_global=20000,
                # num_trials_per_iter=32,
                # max_trials_per_task=128,
                # strategy="evolutionary",
                builder=get_hexagon_local_builder(),
                runner=get_hexagon_rpc_runner(hexagon_launcher, number=20),
                # Without this, the same workloads with different constant weights
                # are treated as distinct tuning tasks.
                # module_equality="ignore-ndarray",
            )
            return ms.tir_integration.compile_tir(
                database=database,
                mod=mod,
                target=target,
                # params=params,
            )
        else:
            with tempfile.TemporaryDirectory() as work_dir:
                database = ms.tir_integration.tune_tir(
                    mod=mod,
                    target=target,
                    # params=params,
                    work_dir=work_dir,
                    # for faster tuning
                    max_trials_global=16,
                    # max_trials_per_task=8,
                    num_trials_per_iter=8,
                    strategy="replay-trace",
                    # max_trials_global=20000,
                    # num_trials_per_iter=32,
                    # max_trials_per_task=128,
                    # strategy="evolutionary",
                    builder=get_hexagon_local_builder(),
                    runner=get_hexagon_rpc_runner(hexagon_launcher, number=20),
                    # Without this, the same workloads with different constant weights
                    # are treated as distinct tuning tasks.
                    # module_equality="ignore-ndarray",
                )
                return ms.tir_integration.compile_tir(
                    database=database,
                    mod=mod,
                    target=target,
                    # params=params,
                )
    else:
        database = ms.database.JSONDatabase(
            "%s/database_workload.json" % work_dir, 
            "%s/database_tuning_record.json" % work_dir, 
            module_equality="ignore-ndarray")
        return ms.tir_integration.compile_tir(
            database=database,
            mod=mod,
            target=target,
            params=params,
        )



@tvm.script.ir_module
class TuningBug:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(256), T.int64(256), T.int64(16)), "float16"], compute: T.Buffer[(T.int64(1), T.int64(256), T.int64(256), T.int64(96)), "float16"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(256), T.int64(16)], dtype="float16")
        conv2d_nhwc = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(256), T.int64(96)], dtype="float16")
        T_add = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(256), T.int64(96)], dtype="float16")
        fused_nn_conv2d_constant_54 = T.allocate_const([15364, 16667, 17054, 16261, 16217, 15456, 15522, -17213, 16465, 14491, 16264, 16217, 12368, 13103, 15604, 15334, 16416, 12459, 16747, 16665, 16334, -22562, 15920, 8513, 13679, -16650, -23496, 14633, 12478, 16866, 14467, 16226, -21188, 16076, 16618, 13913, 16763, 16478, 14057, 16850, 16522, 16634, 16577, 16384, -21463, -20494, 14179, 15890, 14042, 11852, -16301, -19486, 16768, -23454, 16439, 16430, 16041, 16222, -22308, 16429, -21475, -17596, 16362, -17911, 16434, 14155, 16620, 15917, 16453, 16812, -22339, 15901, 16460, 16906, 16820, 11932, -23529, 16263, 16345, -22044, 16739, 16451, -24859, 11127, 8327, 16589, 16312, -20669, -19625, 16327, -23362, 15511, 17204, 12080, 16046, 16436], "float16", [1, 1, 1, 96])
        fused_nn_conv2d_constant_54_1 = T.buffer_decl([1, 1, 1, 96], dtype="float16", data=fused_nn_conv2d_constant_54)
        fused_constant_54 = T.allocate_const([-23482, 1899, 10301, -23042, -25776, -24865, 9419, -22217, -20981, 10970, -25486, 7458, -20950, -19685, 7566, -22143, -24749, -24744, -22271, 9163, -24786, 8068, -23129, -24092, -22953, -20028, 6448, -25548, 10184, 11654, -23268, 8297, 13047, 9923, 8654, 11595, 8636, -24921, 11330, 8811, 10770, -22507, -23186, -26291, -25023, 2992, -24402, 9610, 10572, 8210, 13381, -21951, 10197, 1557, 9881, 8237, 10531, 10433, -23385, 9245, -23146, -25363, 8985, 10973, 11541, -19713, -21870, -23268, -24501, 5256, -26913, 11396, -20685, -26624, 10374, -22006, 10495, -27736, 12619, -22976, 10546, 10182, 9875, 13276, 10132, -23314, -23226, 11301, -22966, -23949, 9934, -23146, -27642, -24004, -25825, 3303, -24245, -20636, -24320, -23522, -21177, 5248, 6232, 9881, 5885, -22519, 7205, -24707, -22181, -22202, 7460, 10281, 7978, -23238, 9153, -23092, -24801, 10849, -21359, -21066, 8426, 9535, 10241, 12132, 8204, -28053, 9379, -24522, 10837, -26158, -24545, 9518, -28083, 7310, -23348, -21317, -22230, -23060, -24050, 7346, 10246, 9568, -21761, -24286, 10277, -24750, -21319, -21180, -22185, 10767, -22189, 9256, -25233, -25032, 11423, 8730, 5828, -26000, 8624, -23408, -24066, -22198, 10804, -26215, -23385, -21465, 7581, 12090, -25086, 11955, -24427, 10848, 9981, -23554, 11372, -23239, -22797, -23111, -25319, 7976, -21330, -25655, 9506, -22814, -21757, -24562, 7381, 9032, -21237, 6311, 7916, -22533, 8250, 11580, 7589, 9641, -22217, 6323, 6825, 4167, -23369, -23951, 6804, -24157, 5899, -22218, -23715, -25908, -25924, -22116, 10729, 8935, 10013, 9851, 10643, -21778, 8265, -22489, 10596, -21035, -22416, 5941, -22984, 7596, 10694, -25066, 8534, -23356, 808, -25076, 6297, 12890, 9401, 9474, 9648, -26093, -21897, -22228, -23036, 7984, 7704, -21640, 10572, 9777, 9264, -22457, 10258, -23687, 8746, 8607, 11853, -24100, 11910, -22110, -23542, 10049, -26678, -22004, 9556, 6754, 9584, 11500, 11134, -21411, -23004, -21837, 8283, -24225, -21228, 5132, 9091, 10939, 2016, -26393, -24233, 10686, -24480, 7769, 10423, -22007, 12645, 8550, -22201, -24874, 11055, 11055, 6614, -23240, -25288, -20861, -22109, -23850, 11856, 8744, -22672, -21455, -21756, 9725, -23369, 6526, 12351, -20802, -23260, -22208, 8726, -20752, -22222, -22656, 5003, 7529, 9872, 8447, -21026, 13382, -26140, -23566, -21429, 9560, -21269, -23695, 11996, -23193, -25444, -20341, 7192, -26366, 9333, -22471, 9325, 7281, -25451, 7507, -26598, 8738, 13792, 9943, -23177, 11491, -19105, 11928, -23303, -28836, 9936, 8373, -20342, -22994, 6504, -24803, 6209, 8345, -23166, -20898, -20525, -20446, -25520, 8516, -23821, 8054, 6188, -24093, 11608, 12463, 3894, -26554, -23753, 8993, -20696, -25003, 10374, 11853, 12061, 12523, -27556, 8470, -22687, 12558, 9118, 6286, -25418, -22933, -20564, -20679, 7163, 8933, 8307, -19645, 8852, 8156, -21627, 8962, -26587, -24985, 8777, 6495, 5208, 10552, 7082, -26022, -25321, 5268, -26480, 10011, 10795, 9496, -24918, 10940, 9231, 9935, 9366, -22136, -21235, -22425, -24316, -27301, 9440, 4448, 9528, -27756, 7229, 6668, -24259, 7328, -22379, -26140, 9619, 5362, 8063, 756, 10788, -26220, 8211, 7425, -23697, 9448, 11320, 10221, -24961, -30094, 5976, -24407, 5724, -25471, 11080, -25100, -22390, 8891, -26232, -21462, 9040, -24382, -21803, 7282, 8669, 9880, -21114, -21471, -24434, 13412, -23774, -23768, -21724, -25342, -23049, -22760, -24233, -27101, -30129, 9069, 10411, 7194, -26576, -24369, -21136, 7373, -22534, 8276, -19417, 8933, -24679, 2707, 8287, -19405, 8732, 10543, 7484, 11836, 4082, -21642, 9128, 10220, 5245, 6238, 11764, 6129, 7438, 9515, -26722, -23393, 7914, 8134, -25823, -22507, -22861, -22890, 9015, -22982, 9516, -21362, -22449, -25468, -32639, 8522, -23562, 9954, 7960, -25442, 4355, 5092, -24450, 12970, 8331, -24796, 9564, -25745, 11181, -23558, 10584, -28158, -21441, -22847, 11869, 10251, 9263, 11693, -22912, -23402, -25158, -25068, -23468, -27211, 12004, -23161, -27791, -21989, 9654, 10073, 10277, -23679, 9077, 11549, 8400, -20052, 6462, 13540, 8043, -21375, 10982, -24477, 8892, -22609, -26363, -22990, -23066, -23743, -21380, -24916, -24519, 9226, -19387, -26950, 3708, -25215, -19270, -22447, 9195, -24950, 10400, 13397, -24071, 11471, 10246, 11732, -24151, -22082, 7467, -21161, -26992, -24991, 10516, -26487, 7691, 12177, 9454, 10292, 4948, -22451, -25233, 10990, -21431, -23096, -23935, 7789, -22470, -25391, -22024, -22536, -28924, -24627, 3234, 9222, -26163, 7666, -25864, 8210, -22758, 13329, -21446, 11279, 10662, 6930, 7796, 10838, 9215, 7558, -20805, 10662, -25570, 9813, -22395, -21289, -22317, -22701, -22340, -23489, 8416, -25203, -22619, -21798, -24755, -21012, 9290, -23555, -22653, -23118, 9213, 10266, 10181, -19112, 10297, -19203, -24939, 8395, 10995, -27421, 6767, 6166, -24696, 8898, 7663, -24004, 11280, 9398, -22493, 10284, -24473, 7337, 10364, 8991, 13108, -23337, 9993, 7623, -21252, -21481, -24470, -21012, -25829, 11715, -23791, -22234, 10562, 12101, 6813, 5317, -21348, 11638, 9390, -20552, 8406, -24769, -23986, -23446, -25292, 9514, -22510, -24973, -22394, -21307, 8241, 13195, -20931, 8370, -23579, -24523, -21125, 10703, -24938, 10980, -24263, 8613, -22093, -21573, 10403, 11257, -21065, 6286, 8011, 12012, 12176, 7267, 11642, 6380, 11593, -21319, -22849, -24076, 8030, 11161, -24468, -22619, 10269, 10955, 10967, -22847, 10675, -21894, 9748, 11588, 8421, -21707, -21186, -20832, 10671, 11867, 11216, 12211, 8036, -22831, 8858, -29380, -20155, -23398, -24516, -23619, 10857, -21112, 9363, 9256, -26443, 11482, -22531, -21949, 7921, 10144, -20795, -24491, 9235, 7783, 7671, -19655, -24314, 9246, 11417, 9815, 6967, -28464, -25572, -20967, 5209, 7747, -22368, 5166, -24111, 9844, -24189, -22398, -22999, 8634, 6788, -22140, -22783, 11225, -22424, -22390, 9473, 11624, -23057, -23056, 7818, 7113, 6922, -24176, 7597, 9636, -27254, -26442, 10480, 13015, -22494, -24026, 9050, -26321, -23154, 10011, -21247, -26956, 6492, -22426, 10671, -22375, 9298, 10610, -24564, -25952, -23300, 5343, 10309, 8100, -20141, -20871, -23578, -21753, 5325, -28398, 6366, -22767, 7642, -28172, 7417, -21122, 10537, 13202, 8581, 11266, -23732, -25681, 7653, -28643, 6688, -23522, 11041, -24716, -21948, -26439, -25795, -22371, 14104, -25744, 10939, -24448, -19302, 10973, 9704, 5310, -22216, -20163, -22486, -22329, 10337, 11214, 10372, -20872, -22820, 12036, 5404, 5308, 11859, -21399, -23362, -20983, 6213, 12536, -22831, 9818, -24255, 9289, -24044, 8275, 11932, 12801, 8741, 9976, -20433, -21248, 11861, 7521, 10915, 8243, 6730, -20622, -24454, -23768, 9634, 11420, 10773, -23817, -22209, 5900, -23213, 10690, -18602, -23479, 9562, -21455, -19564, 12351, 8492, 9983, -23336, 9938, -21825, 10107, 6655, 9314, -22881, -23413, -23302, -21294, -21482, -22003, 8927, -23242, -22307, 7727, 6668, 10480, 12233, 12920, -23031, -22146, 9502, 6494, 12843, -23013, -22935, 4875, -20238, 11600, 6877, -25455, -25222, -21012, 9288, -23210, 7479, -22349, -20352, 12255, 8938, 8015, -23353, -21085, 9804, -24006, -21184, -21203, -24863, -20068, 9526, -22325, 3778, 6713, -18553, 10110, 9452, -22084, 8834, -22249, 9205, -22589, 7671, 10074, -22361, -25303, -21883, 8535, 9319, -20411, 12268, -28265, -21712, -24616, -22331, -24046, -23906, -22238, 7885, 8346, -22865, 13948, 11967, 9716, -23519, -29196, -22024, 11810, 11021, 7488, 11649, 10574, 9139, 11371, -22275, 9200, 8123, 6740, 10335, -22797, 7573, 9318, -22527, -20156, -22077, 11267, 8060, 11192, -24056, -21480, -23035, 10294, -22701, 12618, -21510, 11238, 8468, 10330, 8798, 7237, -19339, -23085, -27168, 8496, 10508, -21823, 8021, 6757, -26503, 12245, 11078, -23413, 7508, 9535, -21344, -22923, 11594, 5299, 9349, 11553, -25728, -22455, 11564, -19873, 8304, -22740, -24058, -19450, -26302, -25541, -18930, -22369, -23488, -24748, -24019, 10905, -23251, 10472, -24542, -23783, 10952, 9458, 11156, -21152, -22353, 11796, 12393, -23426, 10821, 7415, 11331, -21131, 8323, -22803, -24523, -24805, 10573, 12651, 10149, -22742, -25690, -26159, 11337, 12525, -25015, -26410, 11921, 4734, 11167, 10086, 10375, -23639, 7376, 7433, -22969, 9314, -23483, -25201, 11871, -19811, -21484, -21362, 8552, -21632, 9724, -21900, -25958, -21650, 10394, 13043, -25051, -21490, -24679, 13143, -26142, 4582, -20733, 9060, 7285, -23858, -22077, 11393, 3457, -25469, -22706, -21147, -19532, 7177, -22442, -23381, 10747, -24506, 10756, 9479, 11617, -20833, 9224, -26051, -24786, -19823, -22933, -20648, 9482, -20205, 6451, -27580, 11051, 9341, 9310, -25527, 8240, -22527, -23433, -22232, -25119, 9679, -21796, -23218, -22976, -23336, 10377, -19803, 12647, -22534, -22433, -23746, -22489, -20976, -26668, -21301, 8326, 8433, -22489, -18916, 11312, 7265, 10445, 7573, -23390, -23290, -21973, -25492, -26781, -24193, 8485, 12242, 1937, 9739, -23359, -22470, 8847, -24339, 9555, -21437, -25521, 12156, -21982, -24922, -23309, 11057, 9846, 11444, 11331, -24959, 9584, 11515, -21987, 12721, 8215, 11841, 9962, 6066, 9042, -22418, 7857, -24805, 9644, -21857, -25356, 7745, 8168, 11343, 10967, 10923, 9561, 9396, -20826, 9448, -21429, 6299, 8687, -18546, -23444, 9898, 10472, 9125, 7239, 9678, -26036, -21271, -26424, 9482, 10906, -23419, 8689, 11099, 7223, 10527, -24251, -24937, 9244, 9103, 10421, -30923, -22484, -23624, 10717, 11406, -24448, -25420, 8839, 5133, 9354, 6761, -23943, 9890, 8129, 6853, 5735, 10188, -21405, 598, 8807, 5161, -20630, 10092, -23328, -30520, -22469, -23942, -22443, -21416, -25268, 11111, 9434, -25215, -23048, 4166, -23531, 6177, 11717, -23933, 7710, 9263, -25285, -22984, -21044, -25410, 3009, -22709, -21660, -20534, 7892, 14541, 9437, 10722, -22357, 8797, -21285, -21186, 8772, 8689, -23515, 10098, 10072, 3328, 7240, 12573, -20181, -28120, -21865, 7808, -18509, 8053, 9280, 6649, -24450, 3181, -23123, -23838, 7175, -20618, -24806, 12592, 7805, -21208, -27754, -24495, -20805, 9310, 8855, -21125, 6895, 8733, 9559, -23833, -27037, 10085, 7172, 8397, -23492, 10346, -25368, 11647, -21958, -24870, 8755, -24513, -23190, -21664, -27542, 10525, 6373, 7988, -23561, 13730, -22605, 9086, 9889, 6019, 4477, -20011, 9279, -25897, 12624, -25393, -22608, -20655, -29627, -25748, -25760, 4562, -23212, -25635, -23645, -23349, -23393, -19995, -22338, -23657, -26640, 7480, -24575, 9425, 10862, 12448, 8311, 13322, 9064, -25004, -25831, 11757, 7323, -24543, 13571, -23009, -25888, -27221, 7520, -23598, -25597, 6746, 4759, 10470, -21474, 10144, -24737, 9985, 5343, -22357, -23182, -24176, -24983, -23402, -23716, -24016, 9611, -22083, -26172, 11391, 8472, -24771, -30497, 10222, -23330, 7328, -23458, -23225, 3683, -30616, -23358, -22843, -23344, -21958, -21829, -21200, 9685, 11045, -22586, 7500, -23865, -24222, -24433, -26515, 7768, -23066, 6560, -23923, -25847, -25514, 6654, 10380, 6189, -29239, 5640, -31442, -24134, -22019, 10717, 6242, 10440, -23198, -21535, 8143, -26592, -23322, -22554, 7567, -24412, -26622, -23456, -25366, 11098, -22116, -24404, -22175, -22948, 9024, -22077, 8188, 7221, 9294, -21391, 11750, 9090, 5496, -27152, 10376, 11429, -26372, -22260, 9129, -23957, 9618, -24090, -22636, 10678, 6820, -23524, -21166, -22247, 7607, 11176, -24619, -22289, 10258, -26174, 9216], "float16", [1, 1, 16, 96])
        fused_constant_54_1 = T.buffer_decl([1, 1, 16, 96], dtype="float16", data=fused_constant_54)
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(256), T.int64(16)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(256), T.int64(256), T.int64(96), T.int64(1), T.int64(1), T.int64(16)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], fused_constant_54_1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                T.block_attr({"layout_free_placeholders":[fused_constant_54_1]})
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float16(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * fused_constant_54_1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(256), T.int64(96)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], fused_nn_conv2d_constant_54_1[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + fused_nn_conv2d_constant_54_1[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(256), T.int64(96)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3])
                compute[v_i0, v_i1, v_i2, v_i3] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3], T.float16(6)), T.float16(0))
    

@tvm.testing.requires_hexagon
def test_bug(hexagon_launcher):

    work_dir = "work_bug_fp16"
    mod = TuningBug
    params = {
        "p0": np.random.rand(1, 256, 256, 16).astype(np.float16),
    }

    hexagon_lowered = tune_ms(mod, params, hexagon_launcher, work_dir)
    print("tuning finished")

    with tvm.transform.PassContext(opt_level=3):
        llvm_lowered = tvm.relay.build(
            mod,
            tvm.target.Target(target_llvm, host=target_llvm),
            params=params,
        )

    with hexagon_launcher.create_session() as session:
        print("session created")

        graph_mod = session.get_executor_from_factory(hexagon_lowered)
        graph_mod.set_input(input_name, inp.copy())

        llvm_graph_mod = tvm.contrib.graph_executor.GraphModule(llvm_lowered["default"](tvm.cpu(0)))
        llvm_graph_mod.set_input(input_name, inp.copy())

        graph_mod.run()
        hexagon_output = graph_mod.get_output(0).numpy()

        llvm_graph_mod.run()
        ref_result = llvm_graph_mod.get_output(0).numpy()
        print(
            np.max(np.abs(ref_result - hexagon_output)),
            np.mean(np.abs(ref_result - hexagon_output)),
        )

        time_ms = graph_mod.benchmark(session.device, number=1, repeat=2).mean * 1e3

        print("time elapsed: ", time_ms)

        debug_ex = session.get_graph_debug_executor(
            hexagon_lowered.get_graph_json(), hexagon_lowered.lib
        )
        print(debug_ex.profile(input_name=inp.copy()))
        
        tvm.testing.assert_allclose(ref_result, hexagon_output, atol=2e-1)


if __name__ == "__main__":
    tvm.testing.main()
